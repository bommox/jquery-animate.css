{
  "name": "Jquery-animate.css",
  "tagline": "AnimateCSS jQuery plugin implementation",
  "body": "# jquery-animate.css\r\nThis plugin allows you to control css animations from jQuery taking advantage of callbacks and promises.\r\n\r\nThe css part is cloned from daneden/animate.css\r\n\r\n## Getting started\r\n\r\nImport JS and the CSS files in your page:\r\n\r\n```html\r\n<link rel=\"stylesheet\" href=\"libs/jquery-animate.css/libs/animate.css\" />\r\n```\r\n\r\n```html\r\n<script src=\"libs/jquery-animate.css/jquery-animate.css.js\"></script>\r\n```\r\n\r\nThen simply perform an animation:\r\n\r\n```js\r\n$(\".target\").animateCss('bounce');\r\n```\r\n\r\n## Usage and features\r\nThis plugin has the following features:\r\n\r\n```js\r\n$.fn.animateCss(effect /*string*/);\r\n//or\r\n$.fn.animateCss(effect /*string*/, options /*plainObject*/);\r\n//or\r\n$.fn.animateCss(effect /*string*/, callback /*function*/);\r\n```\r\n\r\nOptions is a plain object:\r\n```js\r\n{\r\n  delay : 0,                // in milliseconds\r\n  duration : 800,           // in milliseconds\r\n  callback : function() {}, // function with element scope\r\n  queue : 'fx'              // the queueName to be used\r\n}\r\n```\r\n\r\n### Option `duration`\r\nThe duration of the CSS animation applied. Default value defined in CSS with `animation-duration` property. If no defined, 1000ms is applied.\r\n\r\n```js\r\n$(\".target\").animateCss('bounce', {duration: 500});\r\n```\r\n\r\n### Option `delay`\r\nThe offset until animation begins.\r\n\r\n```js\r\n$(\".target\").animateCss('bounce', {delay: 500});\r\n```\r\n\r\n### Option `callback`\r\nThe callback which will be executed after animation ends. The plugin has an internal control to ensure callback is called even if animation does not exists.\r\n\r\nIt is also possible to use `promise` to manage the callback or actions after animation.\r\n\r\n```js\r\n$(\".target\").animateCss('bounce', {\r\n    callback: function() {\r\n        $(this).html(\"Callback!\");\r\n    }    \r\n});\r\n```\r\nRemember it is possible to pass callback directly as second argument:\r\n\r\n```js\r\n$(\".target\").animateCss('bounce', function() {\r\n        $(this).html(\"Callback!\");\r\n    });\r\n```\r\n\r\n## Promises and deferreds\r\nThis plugins uses the `fx` queue so it is possible to use the promise to manage when the queue has ended.\r\n\r\n```js\r\n$(\".target\").animateCss('bounce').promise()\r\n    .then(\r\n        function() {\r\n            $(this).html(\"Promise resolved!\");\r\n        }\r\n    );\r\n```\r\nRemember you can modify the `queueName` with the `queue` option:\r\n```js\r\n$(\".target\").animateCss('bounce', {queue : 'anim'}).promise('anim')\r\n    .then(\r\n        function() {\r\n            $(this).html(\"Promise resolved!\");\r\n        }\r\n    );\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}